/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package net.malkowscy.threefish;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.animation.KeyValue;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

import org.bouncycastle.crypto.engines.ThreefishEngine;
import org.bouncycastle.crypto.params.KeyParameter;

/**
 *
 * @author Admin
 */
public class NewJFrame extends javax.swing.JFrame {

    private byte[] keyValue
            = new byte[]{'T', 'h', 'e', 'B', 'e', 's', 't',
                'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};
    byte[] IV = {1, 0, 1, 0, 1, 9, 5, 4, 3, 0, 0, 4, 1, 9, 7, 5};
    
    private IvParameterSpec iv = new IvParameterSpec(IV);

    
    String inputImageDir = null;
    String encryptedImageDir = null;
    long exeTime = 0;
    int n = 0;
    /** Creates new form NewJFrame */
    public NewJFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptButton1 = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        decryptButton2 = new java.awt.Button();
        keyTextField1 = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TFen");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(204, 255, 102));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        encryptButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encryptButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        encryptButton1.setLabel("Encrypt");
        encryptButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Documents\\NetBeansProjects\\ThreefishTest\\folder2.png")); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nội dung đã được xử lí");
        jLabel2.setToolTipText("");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ThreefishECB - 256", "ThreefishCBC - 256", "AES - 256" }));
        jComboBox1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        decryptButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        decryptButton2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        decryptButton2.setLabel("Decrypt");
        decryptButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButton2ActionPerformed(evt);
            }
        });

        keyTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyTextField1.setText("ilovekmailovekmailovekmailovekma");
        keyTextField1.setToolTipText("");

        label1.setAlignment(java.awt.Label.RIGHT);
        label1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label1.setText("Key:");

        label2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        label2.setText("Execution Time");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(703, 703, 703)
                        .add(label2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(63, 63, 63)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(encryptButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(decryptButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                        .add(32, 32, 32)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(keyTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, label1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jComboBox1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, keyTextField1))
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(146, 146, 146)
                        .add(encryptButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(68, 68, 68)
                        .add(decryptButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(37, 37, 37)
                .add(label2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void encryptButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButton1ActionPerformed
        FileInputStream fileInputStream = null;
        try {
            // TODO add your handling code here:
            fileInputStream = new FileInputStream(inputImageDir);
            byte[] bmpContentByte = null;
            byte[] ciphertextEcbByte = null;
            byte headerByte[] = null;
            byte infoheaderByte[] = null;
            
            if(inputImageDir.contains("bmp")){
                int HEADER_LENGTH = 14; // 14 byte bmp header
                headerByte = new byte[HEADER_LENGTH];
                fileInputStream.read(headerByte, 0, HEADER_LENGTH);
                // read the second part of the bmp header
                int INFO_HEADER_LENGTH = 40; // 40-byte bmp info header
                infoheaderByte = new byte[INFO_HEADER_LENGTH];
                fileInputStream.read(infoheaderByte, 0, INFO_HEADER_LENGTH);
                System.out.println("info header: "+Arrays.toString(infoheaderByte));
                // pixel data
                bmpContentByte = new byte[fileInputStream.available()];
                fileInputStream.read(bmpContentByte);
                fileInputStream.close();
                ciphertextEcbByte = new byte[bmpContentByte.length];
            }
            else{
                bmpContentByte = new byte[fileInputStream.available()];
                fileInputStream.read(bmpContentByte);
                fileInputStream.close();
            }
            
            if (jComboBox1.getSelectedItem().toString().contains("ThreefishECB")){
                ciphertextEcbByte = processImageThreefishECB(bmpContentByte,true);
            }
            else if (jComboBox1.getSelectedItem().toString().contains("ThreefishCBC")){
                ciphertextEcbByte = processImageThreefishCBC(bmpContentByte,true );
            }
            else{
                ciphertextEcbByte = processImageAES(bmpContentByte,true);
            }
            String xTime = " Execution Time: " + exeTime + " ms";
            label2.setText(xTime);
                        
            if(inputImageDir.contains("bmp")){
                encryptedImageDir = "D:\\THREEFISH\\encrypted\\" + n +".bmp";
                writeBmpToFile(encryptedImageDir, headerByte, infoheaderByte, ciphertextEcbByte);
                n++;

                //show encrypted image

                FileInputStream enFileInput = new FileInputStream(encryptedImageDir);
                BufferedImage picture = ImageIO.read(enFileInput);
                jLabel2.setText("");
                jLabel2.setIcon(new ImageIcon(picture));
            }
            else{
                encryptedImageDir = "D:\\THREEFISH\\encrypted\\" + n +".txt";
                FileOutputStream out = new FileOutputStream("D:\\THREEFISH\\encrypted\\" + n +".txt");
                out.write(ciphertextEcbByte);
                out.close();
                jLabel2.setIcon(null);
                jLabel2.setText("<html>" + Base64.getEncoder().encodeToString(ciphertextEcbByte) + "</html>");
                jLabel2.setVerticalAlignment(JLabel.TOP);

            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_encryptButton1ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser("D:\\THREEFISH\\image");
        
        // optionally set chooser options ...
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File f = chooser.getSelectedFile();
                if (f.getPath().contains("bmp")){
                    BufferedImage picture = ImageIO.read(f);
                    this.inputImageDir = f.getPath();
                    jLabel1.setText(null);
                    jLabel1.setIcon(null);
                    jLabel1.setIcon(new ImageIcon(picture));
                }
                else{
                    String content = new String( Files.readAllBytes(Paths.get(f.getPath())) );

                    this.inputImageDir = f.getPath();
                    jLabel1.setIcon(null);
                    jLabel1.setText("<html>"+content+ "</html>");
                }
                // read  and/or display the file somehow. ....
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // user changed their mind
        }  
    }//GEN-LAST:event_jLabel1MouseClicked

    private void decryptButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButton2ActionPerformed
        // TODO add your handling code here:
        if(inputImageDir.contains("encrypted")){
            encryptedImageDir = inputImageDir;
        }
        System.out.println(encryptedImageDir);
        FileInputStream fileInputStream = null;
        
        try {
            // TODO add your handling code here:
            fileInputStream = new FileInputStream(encryptedImageDir);
            byte[] bmpContentByte = null;
            byte[] ciphertextEcbByte = null;
            byte headerByte[] = null;
            byte infoheaderByte[] = null;
            
            if(encryptedImageDir.contains("bmp")){
                int HEADER_LENGTH = 14; // 14 byte bmp header
                headerByte = new byte[HEADER_LENGTH];
                fileInputStream.read(headerByte, 0, HEADER_LENGTH);
                // read the second part of the bmp header
                int INFO_HEADER_LENGTH = 40; // 40-byte bmp info header
                infoheaderByte = new byte[INFO_HEADER_LENGTH];
                fileInputStream.read(infoheaderByte, 0, INFO_HEADER_LENGTH);
                // pixel data
                bmpContentByte = new byte[fileInputStream.available()];
                fileInputStream.read(bmpContentByte);
                fileInputStream.close();
                ciphertextEcbByte = new byte[bmpContentByte.length];
            }
            else{
                bmpContentByte = new byte[fileInputStream.available()];
                fileInputStream.read(bmpContentByte);
                fileInputStream.close();
            }
            System.out.println("read bmp");
            if (jComboBox1.getSelectedItem().toString().contains("ThreefishECB")) {
                System.out.println("T-ECB");
                ciphertextEcbByte = processImageThreefishECB(bmpContentByte, false);
            }
            else if (jComboBox1.getSelectedItem().toString().contains("ThreefishCBC")) {
                
                ciphertextEcbByte = processImageThreefishCBC(bmpContentByte, false);
            }
            else {
                System.out.println("AES");
                ciphertextEcbByte = processImageAES(bmpContentByte, false);
            }

            String xTime = " Execution Time: " + exeTime + " ms";
            label2.setText(xTime);
            
            if(encryptedImageDir.contains("bmp")){
                String decryptedImageDir = "D:\\THREEFISH\\decrypted\\" + (n-1) +".bmp";
                writeBmpToFile(decryptedImageDir, headerByte, infoheaderByte, ciphertextEcbByte);
                n++;

                //show decrypted image

                FileInputStream enFileInput = new FileInputStream(decryptedImageDir);
                BufferedImage picture = ImageIO.read(enFileInput);
                jLabel2.setText("");
                jLabel2.setIcon(new ImageIcon(picture));
                
            }
            else{
                FileOutputStream out = new FileOutputStream("D:\\THREEFISH\\decrypted\\" + (n-1) +".txt");
                out.write(ciphertextEcbByte);
                out.close();
                String decryptedText = new String(ciphertextEcbByte, StandardCharsets.UTF_8);
                System.out.println(decryptedText);

                jLabel2.setText("<html>"+ decryptedText+"<html>");
                jLabel2.setVerticalAlignment(JLabel.TOP);
            }

            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_decryptButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
        
    public void writeBmpToFile(String filenameString, byte[] headerByte, byte[] infoheaderByte,
            byte[] bmpContentByte) throws Exception {
        FileOutputStream fileOutputStream = new FileOutputStream(filenameString);
        fileOutputStream.write(headerByte);
        fileOutputStream.write(infoheaderByte);
        fileOutputStream.write(bmpContentByte);
        fileOutputStream.flush();
        fileOutputStream.close();
    }
  
    public byte[] processImageThreefishECB (byte[] inputByte, boolean isEncrypt) throws InvalidKeyException, Exception {
        if (!keyTextField1.getText().isEmpty()){
            keyValue = this.keyTextField1.getText().getBytes("UTF-8");
        }
            
        KeyParameter kp = new KeyParameter(keyValue);
        ThreefishEngine tf = new ThreefishEngine(256);
        tf.init(isEncrypt, kp);
        byte[] outputByte = new byte[inputByte.length];
        long startTime = System.currentTimeMillis();
        if(isEncrypt == true){
            outputByte = tf.encryptECB(inputByte);
        }
        else {

            outputByte = tf.decryptECB(inputByte);
        }
        long endTime = System.currentTimeMillis();
        this.exeTime = endTime - startTime;
        return outputByte;
    }    
    
    public byte[] processImageThreefishCBC (byte[] inputByte, boolean isEncrypt) throws InvalidKeyException, Exception {
        if (!keyTextField1.getText().isEmpty()){
            keyValue = this.keyTextField1.getText().getBytes("UTF-8");
        }
            
        KeyParameter kp = new KeyParameter(keyValue);
        ThreefishEngine tf = new ThreefishEngine(256);
        tf.init(isEncrypt, kp);
        byte[] outputByte = new byte[inputByte.length];
        long startTime = System.currentTimeMillis();
        if(isEncrypt == true){
            outputByte = tf.encryptCBC(inputByte);
        }
        else {

            outputByte = tf.decryptCBC(inputByte);
        }
        long endTime = System.currentTimeMillis();
        this.exeTime = endTime - startTime;
        return outputByte;
    }

    public byte[] processImageAES (byte[] inputByte, boolean isEncrypt) throws InvalidKeyException, Exception {
        if (!keyTextField1.getText().isEmpty()){
            keyValue = this.keyTextField1.getText().getBytes("UTF-8");
        }        
        SecretKeySpec key = new SecretKeySpec(keyValue, "AES");;
        Cipher c = Cipher.getInstance("AES/ECB/PKCS5Padding");
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = null;
        
        long startTime = System.currentTimeMillis();
        if (isEncrypt){
            encVal = c.doFinal(inputByte);
        }
        else{
            c.init(Cipher.DECRYPT_MODE, key);
            encVal = c.doFinal(inputByte);        
        }
        long endTime = System.currentTimeMillis();
        this.exeTime = endTime - startTime;

        //String encryptedValue = new BASE64Encoder().encode(encVal);
        return encVal;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button decryptButton2;
    private java.awt.Button encryptButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField keyTextField1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    // End of variables declaration//GEN-END:variables

}
